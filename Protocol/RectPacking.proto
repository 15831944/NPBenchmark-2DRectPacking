// # 概述
// 使用 Google 的 Protocol Buffer (简称 protobuf) 定义.
// 二维矩阵分配问题原始输入输出数据格式.
// RectPacking 定义了算法所需的全部数据.
// RectPacking.Input 定义了算法所需的全部输入数据.
// RectPacking.Output 定义了算法所需的全部输出数据, 应输出至提交文件的第二行以后.
// RectPacking.Submission 定义了向测评系统提交的计算结果文件的信息摘要, 应输出至提交文件的第一行.


syntax = "proto3";

package pb;

option java_package = "pb";
option java_outer_classname = "RectPackings";

// 主要数据.
message RectPacking { // 求解算法输入输出数据接口.
  message Input { // 求解二维矩形装配问题所需的输入数据.
    repeated Rectangle rectangles = 1; // 待放置的矩形列表.
  }

  message Output { // 求解结果输出数据.
    repeated Placement placements = 1; // 矩形的位置信息.
    int32 length = 2; // 正方形容器的边长.
  }
}
message Rectangle { // 矩形尺寸信息.
  int32 id = 1; // 从 0 开始连续编号的内部唯一标识.
  int32 width = 2; // 矩形的宽度.
  int32 height = 3; // 矩形的高度.
}

message Placement { // 矩形放置位置信息.
  int32 id = 1; // 从 0 开始连续编号的内部唯一标识.
  int32 x = 2; // 左下角横坐标.
  int32 y = 3; // 左下角纵坐标.
  bool rotated = 4; // 是否旋转 90 度.
}

  message Submission { // 测评系统提交信息摘要.
    // 应在 SDK 内由提交者手工填写的数据项.
    string author = 1; // 提交者姓名.
    string algorithm = 2; // 算法名称.
    string thread = 3; // 算法线程数
    string cpu = 4; // 处理器型号与主频.
    string ram = 5; // 内存容量与频率. (Windows 下可以使用 wmic memorychip 命令查看)
    string language = 6; // 编程语言.
    string compiler = 7; // 编译器.
    string os = 8; // 操作系统

    // 由 SDK 自动记录的数据项.
    string problem = 21; // 问题名称.
    string instance = 22; // 算例名称.
    string duration = 23; // 求解耗时.

    // 由服务器自动计算的数据项.
    double obj = 31; // 计算结果目标函数值.
    string email = 32; // 提交者邮箱.
    string date = 33; // 提交时间.
}



